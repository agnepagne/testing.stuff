name: Minioclient Debug Build (Windows – resilient toolchain)

# ----------------------------------------------------------------------
# Trigger – keep it manual while you investigate.
# ----------------------------------------------------------------------
on:
  workflow_dispatch: {}

# ----------------------------------------------------------------------
# Global defaults – use PowerShell on Windows.
# ----------------------------------------------------------------------
defaults:
  run:
    shell: pwsh

jobs:
  # ==============================================================
  # 1️⃣ Checkout – get both the repo you’re testing and the minioclient source
  # ==============================================================
  checkout:
    name: Checkout repositories
    runs-on: windows-latest
    outputs:
      temp-dir: ${{ steps.temp-dir.outputs.path }}
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: Checkout minioclient source (reference only)
        uses: actions/checkout@v4
        with:
          repository: cboettig/minioclient
          path: minioclient-src
          fetch-depth: 1

      - name: Create a shared temporary directory
        id: temp-dir
        run: |
          $tmp = Join-Path $env:TEMP ("minioclient_debug_" + [guid]::NewGuid())
          New-Item -ItemType Directory -Path $tmp | Out-Null
          echo "path=$tmp" >> $env:GITHUB_OUTPUT

  # ==============================================================
  # 2️⃣ Install system‑level dependencies (OpenSSL, pkg‑config, CMake, compiler)
  # ============================================================== 
  install-system-deps:
    name: Install native libraries & compiler
    needs: checkout
    runs-on: windows-latest
    env:
      TEMP_DIR: ${{ needs.checkout.outputs.temp-dir }}
    steps:
      # ------------------------------------------------------------------
      # 2️⃣1️⃣ Bootstrap Chocolatey (if the runner somehow lacks it)
      # ------------------------------------------------------------------
      - name: Install Chocolatey (bootstrap if missing)
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }
        shell: pwsh

      # ------------------------------------------------------------------
      # 2️⃣2️⃣ Install the native packages we know we’ll need
      # ------------------------------------------------------------------
      - name: Install native packages (OpenSSL, pkg‑config, CMake, MinGW, VS Build Tools)
        run: |
          choco install -y openssl.light
          choco install -y pkgconfiglite
          choco install -y cmake
          choco install -y mingw
          choco install -y visualstudio2022buildtools `
            --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --passive --norestart"
        shell: pwsh

      # ------------------------------------------------------------------
      # 3️⃣ Add MinGW to PATH (if it exists)
      # ------------------------------------------------------------------
      - name: Add MinGW bin to PATH (if present)
        run: |
          $mingwBin = "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin"
          if (Test-Path $mingwBin) {
            Write-Host "✅ Adding MinGW ($mingwBin) to PATH"
            echo $mingwBin >> $env:GITHUB_PATH
          } else {
            Write-Warning "⚠️ MinGW bin folder not found – will try VS Build Tools next."
          }
        shell: pwsh

      # ------------------------------------------------------------------
      # 4️⃣ If MinGW wasn’t added, locate VS Build Tools and initialise MSVC
      # ------------------------------------------------------------------
      - name: Locate VS Build Tools, initialise MSVC, and add to PATH
        run: |
          $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          if (-not (Test-Path $vswhere)) {
            Write-Error "❌ vswhere.exe not found – cannot locate VS Build Tools"
            exit 1
          }

          $vsInstall = & $vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
          if (-not $vsInstall) {
            Write-Warning "⚠️ No VS Build Tools with VC component detected – skipping VS path setup."
            exit 0
          }

          Write-Host "✅ VS Build Tools found at $vsInstall"

          $msvcRoot = Join-Path $vsInstall "VC\Tools\MSVC"
          if (-not (Test-Path $msvcRoot)) {
            Write-Warning "⚠️ $msvcRoot does not exist yet – forcing a first‑time init."
            $vcvars = Join-Path $vsInstall "Common7\Tools\VsDevCmd.bat"
            if (Test-Path $vcvars) {
              cmd /c "`"$vcvars`" && echo Init done"
            } else {
              Write-Error "❌ Could not find VsDevCmd.bat – cannot initialise MSVC."
            }
            Start-Sleep -Seconds 5
          }

          $msvcVersion = Get-ChildItem $msvcRoot -Directory |
                         Sort-Object Name -Descending |
                         Select-Object -First 1
          if (-not $msvcVersion) {
            Write-Error "❌ No MSVC version folder found under $msvcRoot"
            exit 1
          }

          $vcBin = Join-Path $msvcVersion.FullName "bin\Hostx64\x64"
          if (Test-Path $vcBin) {
            Write-Host "✅ Adding VS C++ bin ($vcBin) to PATH"
            echo $vcBin >> $env:GITHUB_PATH
          } else {
            Write-Error "❌ Expected VC bin folder not found: $vcBin"
          }
        shell: pwsh

      # ------------------------------------------------------------------
      # 5️⃣ Verify that a compiler is now reachable
      # ------------------------------------------------------------------
      - name: Verify compiler availability
        run: |
          Write-Host "`n=== Compiler version checks ==="
          if (Get-Command gcc -ErrorAction SilentlyContinue) {
            gcc --version
          } elseif (Get-Command cl -ErrorAction SilentlyContinue) {
            cl
          } else {
            Write-Error "❌ No C/C++ compiler found in PATH after the setup steps."
          }

          Write-Host "`n=== pkg-config check ==="
          pkg-config --version || Write-Warning "pkg-config not found"

          Write-Host "`n=== OpenSSL version ==="
          openssl version || Write-Warning "OpenSSL not found"
        shell: pwsh

      # ------------------------------------------------------------------
      # 6️⃣ Export PKG_CONFIG_PATH so OpenSSL’s .pc file is visible
      # ------------------------------------------------------------------
      - name: Set PKG_CONFIG_PATH for OpenSSL
        run: |
          $opensslPc = "C:\ProgramData\chocolatey\lib\openssl.light\tools\openssl\share\pkgconfig"
          if (Test-Path $opensslPc) {
            $env:PKG_CONFIG_PATH = "$opensslPc;$env:PKG_CONFIG_PATH"
            Write-Host "✅ PKG_CONFIG_PATH set to $opensslPc"
          } else {
            Write-Warning "⚠️ OpenSSL pkg‑config directory not found – some packages may not locate OpenSSL."
          }
        shell: pwsh

  # ==============================================================
  # 3️⃣ OS‑level diagnostics (helps spot missing headers, wrong arch, etc.)
  # ==============================================================
  diagnostics-os:
    name: Gather OS & compiler diagnostics
    needs: [checkout, install-system-deps]
    runs-on: windows-latest
    env:
      TEMP_DIR: ${{ needs.checkout.outputs.temp-dir }}
    steps:
      - name: System information (shortened)
        run: |
          systeminfo | Select-Object -First 20
        shell: pwsh

      - name: Important environment variables
        run: |
          Get-ChildItem Env: | Where-Object {
            $_.Name -match '^(PATH|INCLUDE|LIB|PKG_CONFIG_PATH|OPENSSL_ROOT_DIR|VSINSTALLDIR)$'
          } | Format-Table -AutoSize
        shell: pwsh

      - name: List files under the temporary directory (debug aid)
        run: |
          Get-ChildItem -Recurse -Force $env:TEMP | Out-String
        shell: pwsh

  # ==============================================================
  # 4️⃣ Install R and the `remotes` helper package
  # ==============================================================
  setup-r:
    name: Install R (v4.4) and remotes
    needs: checkout
    runs-on: windows-latest
    env:
      TEMP_DIR: ${{ needs.checkout.outputs.temp-dir }}
    steps:
      - name: Install R (official binary from r‑lib)
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.4'
          use-public-rspm: true

      - name: Install R package `remotes`
        run: |
          install.packages('remotes', repos='https://cloud.r-project.org')
        shell: Rscript {0}

      - name: Record R version & library path (for debugging)
        run: |
          Rscript -e "cat('R version:', getRversion(), '\n')"
          Rscript -e "cat('R lib dir:', .libPaths()[1], '\n')"
        shell: pwsh

  # ==============================================================
  # 5️⃣ Attempt to install minioclient – capture **all** output
  # ==============================================================
  install-minioclient:
    name: Install minioclient (full log)
    needs: [checkout, setup-r, install-system-deps, diagnostics-os]
    runs-on: windows-latest
    env:
      TEMP_DIR: ${{ needs.checkout.outputs.temp-dir }}
      LOG_FILE: "${{ env.TEMP_DIR }}\\minioclient_install.log"
    steps:
      # --------------------------------------------------------------
      # 5️⃣1️⃣ Checkout the repository again (required for the R step)
      # --------------------------------------------------------------
      - name: Checkout this repository (again – needed for R session)
        uses: actions/checkout@v4

      # --------------------------------------------------------------
      # 5️⃣2️⃣ Ensure the same R version is installed (matches setup‑r)
      # --------------------------------------------------------------
      - name: Install R (v4.4) – same version as earlier
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.4'
          use-public-rspm: true

      # --------------------------------------------------------------
      # 5️⃣3️⃣ Install the `remotes` package (ensures it’s available)
      # --------------------------------------------------------------
      - name: Install R package `remotes`
        run: |
          install.packages('remotes', repos='https://cloud.r-project.org')
        shell: Rscript {0}

      # --------------------------------------------------------------
      # 5️⃣4️⃣ Write the R script that does the heavy lifting
      # --------------------------------------------------------------
      - name: Create R script that installs minioclient and prints env
        run: |
          $rScript = @"
# ------------------------------------------------------------
# Print the R environment (helps debugging)
# ------------------------------------------------------------
cat('--- ENV BEFORE INSTALL ---\n')
print(Sys.getenv())
cat('\n--- START minioclient install ---\n')

# ------------------------------------------------------------
# Install the package from GitHub
# ------------------------------------------------------------
remotes::install_github(
  repo = 'cboettig/minioclient',
  ref  = 'main',
  upgrade = 'never',
  dependencies = FALSE,
  quiet = FALSE
)

cat('\n--- END minioclient install ---\n')
"@

          $scriptPath = Join-Path $env:TEMP 'install_minioclient.R'
          Set-Content -Path $scriptPath -Value $rScript -Encoding UTF8
          Write-Host "✅ R script written to $scriptPath"
          echo "R_SCRIPT=$scriptPath" >> $env:GITHUB_ENV
        shell: pwsh

      # --------------------------------------------------------------
      # 5️⃣5️⃣ Execute the R script and capture **all** output (stdout+stderr)
      # --------------------------------------------------------------
      - name: Run the R script and capture everything
        run: |
          Rscript $env:R_SCRIPT *> $env:LOG_FILE
          Write-Host "✅ Installation finished – log saved to $env:LOG_FILE"
        shell: pwsh

      # --------------------------------------------------------------
      # 5️⃣6️⃣ Upload the log (and any auxiliary files) as an artifact
      # --------------------------------------------------------------
      - name: Upload install log as artifact
        uses: actions/upload-artifact@v4
        with:
          name: minioclient-debug-logs
          path: |
            ${{ env.LOG_FILE }}
            ${{ env.TEMP_DIR }}/*.log   # catches any other logs you may have created

  # ==============================================================
  # 6️⃣ Optional cleanup (keeps the runner tidy)
  # ==============================================================
  post-cleanup:
    name: Delete temporary folder (optional)
    needs: install-minioclient
    runs-on: windows-latest
    if: always()
    steps:
      - name: Remove the shared temp directory
        run: |
          Remove-Item -Recurse -Force ${{ needs.checkout.outputs.temp-dir }}
        shell: pwsh
