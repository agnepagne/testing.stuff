on:
  workflow_dispatch:

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: ubuntu-latest,   r: 'release'}

    env:
      GITHUB_PAT: ${{ secrets.AGNE_PAT }}   # exported for every step
      R_KEEP_PKG_SOURCE: yes

    steps:
      # --------------------------------------------------------------
      # 0Ô∏è‚É£ Checkout the repository
      # --------------------------------------------------------------
      - uses: actions/checkout@v5

      # --------------------------------------------------------------
      # 1Ô∏è‚É£ Install OS‚Äëlevel libcurl (Ubuntu) / curl (Windows)
      # --------------------------------------------------------------
      - name: Install libcurl on Ubuntu
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev
        shell: bash

      - name: Install curl on Windows via Chocolatey
        if: matrix.config.os == 'windows-latest'
        run: |
          choco install -y curl
        shell: powershell

      # --------------------------------------------------------------
      # 2Ô∏è‚É£ Re‚Äëexport the PAT (makes sure it survives any caching step)
      # --------------------------------------------------------------
      - name: Export GitHub PAT for R
        run: echo "GITHUB_PAT=${{ secrets.AGNE_PAT }}" >> $GITHUB_ENV

      # --------------------------------------------------------------
      # 3Ô∏è‚É£ Set CRAN mirror for the whole job (works on Linux & Windows)
      # --------------------------------------------------------------
      - name: Set CRAN mirror via R_REPOS
        run: |
          echo "R_REPOS=https://cloud.r-project.org" >> $GITHUB_ENV
        shell: bash

      # --------------------------------------------------------------
      # 4Ô∏è‚É£ Install pandoc (required by many R packages)
      # --------------------------------------------------------------
      - uses: r-lib/actions/setup-pandoc@v2

      # --------------------------------------------------------------
      # 5Ô∏è‚É£ Install the requested R version (public RSPM)
      # --------------------------------------------------------------
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          use-public-rspm: true

      # --------------------------------------------------------------
      # 6Ô∏è‚É£ **ONE** step that (a) removes old pak, (b) installs newest pak,
      #     (c) sets token options, (d) runs diagnostics & install.
      # --------------------------------------------------------------
      - name: Install latest *development* pak and resolve dependencies
        env:
          GITHUB_PAT: ${{ secrets.AGNE_PAT }}   # token for GitHub API
        run: |
          # --------------------------------------------------------------
          # 0Ô∏è‚É£  Wipe any existing copy of pak from *all* library paths
          # --------------------------------------------------------------
          lib_paths <- .libPaths()
          for (lp in lib_paths) {
            pak_dir <- file.path(lp, "pak")
            if (dir.exists(pak_dir)) {
              unlink(pak_dir, recursive = TRUE, force = TRUE)
              cat("üóëÔ∏è Removed stale pak from", lp, "\n")
            }
          }
      
          # --------------------------------------------------------------
          # 1Ô∏è‚É£  Install the *development* version of pak from GitHub
          # --------------------------------------------------------------
          if (!requireNamespace("remotes", quietly = TRUE)) install.packages("remotes")
          remotes::install_github(
            repo = "r-lib/pak",
            ref  = "d4a1f2b6e2c5c8c0e9f5a6b3c7d9e1f2a3b4c5d6",   # ‚Üê name of the branch that defines pkg_install2()
            force = TRUE,                    # force a fresh download (no cached tarball)
            upgrade = "always"               # rebuild any compiled bits
          )   # pulls the latest dev commit
          pak_ver <- as.character(packageVersion("pak"))
          cat("üì¶ pak development version installed:", pak_ver, "\n")
      
          # --------------------------------------------------------------
          # 2Ô∏è‚É£  Make the token visible to every possible code path
          # --------------------------------------------------------------
          Sys.setenv(GITHUB_TOKEN = Sys.getenv("GITHUB_PAT"))   # legacy name
          options(pak.github_pat = Sys.getenv("GITHUB_PAT"))   # new name
      
          # --------------------------------------------------------------
          # 3Ô∏è‚É£  (Optional) sanity‚Äëcheck that GitHub is reachable
          # --------------------------------------------------------------
          if (!requireNamespace("gh", quietly = TRUE)) install.packages("gh")
          tryCatch(
            gh::gh("/repos/KTH-Library/kthcorpus"),
            error = function(e) {
              cat("‚ö†Ô∏è GitHub test failed ‚Äì you may still be offline or token missing\n")
              cat("Error:", conditionMessage(e), "\n")
            }
          )
      
          # --------------------------------------------------------------
          # 4Ô∏è‚É£  Dependency diagnostics (helps spot version‚Äërange conflicts)
          # --------------------------------------------------------------
          tryCatch({
            pak::pkg_deps(".", dependencies = TRUE, conflict = "verbose")
          }, error = function(e) {
            cat("üîé Diagnostics finished ‚Äì see above for details.\n")
          })
      
          # --------------------------------------------------------------
          # 5Ô∏è‚É£  Normal install ‚Äì should now succeed (token works, fresh pak loaded)
          # --------------------------------------------------------------
          normal_ok <- tryCatch({
            pak:::pkg_install2(".", dependencies = TRUE)   # <-- new API, supports `ignore`
            TRUE
          }, error = function(e) {
            cat("‚ùå Normal install failed:", conditionMessage(e), "\n")
            FALSE
          })
      
          # --------------------------------------------------------------
          # 6Ô∏è‚É£  Fallback ‚Äì ignore the two GitHub‚Äëonly packages if they still fail
          # --------------------------------------------------------------
          if (!normal_ok) {
            ignore_pkgs <- c("kthcorpus", "minioclient")   # **package names**, not repo URLs
            cat("üöß Falling back ‚Äì ignoring:", paste(ignore_pkgs, collapse = ", "), "\n")
            pak:::pkg_install2(".", dependencies = TRUE, ignore = ignore_pkgs)
          }
      
          cat("\n‚úÖ Dependency resolution finished\n")
        shell: Rscript {0}
  
      # --------------------------------------------------------------
      # 7Ô∏è‚É£ Run the usual R CMD check
      # --------------------------------------------------------------
      - uses: r-lib/actions/check-r-package@v2
