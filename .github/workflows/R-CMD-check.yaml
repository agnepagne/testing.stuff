# Workflow derived from https://github.com/r-lib/actions/tree/v2/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
on:
  workflow_dispatch:
#  push:
#    branches: [main, master]
#  pull_request:
#    branches: [main, master]

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: ubuntu-latest,   r: 'release'}

    env:
      GITHUB_PAT: ${{ secrets.AGNE_PAT }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - uses: actions/checkout@v5

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck

      - name: Diagnose & resolve pak dependency conflicts
        id: pak_resolve
        env:
          # The PAT you already expose via `env:GITHUB_PAT` is enough for pak/remotes.
          GITHUB_PAT: ${{ secrets.AGNE_PAT }}
        run: |
          # ----------------------------------------------------------------
          # Install pak if it is not already present (the action may have used it already,
          # but we explicitly load it here to be safe).
          # ----------------------------------------------------------------
          if (!requireNamespace("pak", quietly = TRUE)) {
            install.packages("pak", repos = "https://cloud.r-project.org")
          }
    
          # ---------------------------------------------------------------
          # 1Ô∏è‚É£ Verbose conflict diagnostics ‚Äì prints the exact version constraints
          # ---------------------------------------------------------------
          cat("\n=== DIAGNOSTIC: checking for dependency conflicts ===\n")
          tryCatch({
            pak::pkg_deps(".", dependencies = TRUE, conflict = "verbose")
          }, error = function(e) {
            cat("üîé Conflict diagnostic finished (details may be above).\n")
          })
    
          # ---------------------------------------------------------------
          # 2Ô∏è‚É£ Try a normal pak install (this is what the action would have done)
          # ---------------------------------------------------------------
          cat("\n=== ATTEMPTING NORMAL pak install ===\n")
          normal_ok <- tryCatch({
            pak::pkg_install(".", dependencies = TRUE)
            TRUE
          }, error = function(e) {
            cat("‚ùå Normal pak install failed: ", conditionMessage(e), "\n")
            FALSE
          })
    
          # ---------------------------------------------------------------
          # 3Ô∏è‚É£ If the normal install failed because of a conflict,
          #    fall back to installing while ignoring the known offenders.
          #    Replace the vector below with the actual package names you see
          #    in the diagnostic output (e.g. "sessioninfo", "rcmdcheck").
          # ---------------------------------------------------------------
          if (!normal_ok) {
            cat("\n=== FALLBACK: installing while ignoring conflict packages ===\n")
            ignore_pkgs <- c("sessioninfo", "rcmdcheck")   # <‚Äë‚Äë edit if needed
            pak::pkg_install(".", dependencies = TRUE, ignore = ignore_pkgs)
          }
    
          cat("\n=== DEPENDENCY RESOLUTION FINISHED ===\n")
        shell: Rscript {0}
    
      - uses: r-lib/actions/check-r-package@v2
